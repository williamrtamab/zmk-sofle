#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <900>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <1>;      // 0
            time-to-max-speed-ms = <400>;      // 500
            delay-ms = <0>;                   //   10
        };
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        template: template {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp LS(D) &kp E &kp A &kp R &kp SPACE &kp LS(C) &kp U &kp S &kp T &kp O &kp M &kp E &kp R &kp COMMA &kp RET &kp RET &kp RET &kp LS(T) &kp H &kp A &kp N &kp K &kp SPACE &kp Y &kp O &kp U &kp EXCL &kp RET &kp LS(B) &kp E &kp S>,
                <&macro_wait_time 30>,
                <&kp T &kp SPACE &kp LS(R) &kp E &kp G &kp A &kp R &kp D &kp S &kp RET &kp LS(W) &kp I &kp L &kp L &kp I &kp A &kp M &kp SPACE &kp LS(T) &kp A &kp N>;

            label = "TEMPLATE";
            wait-ms = <40>;
            tap-ms = <50>;
        };

        goto_case: goto_case {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(R)>,
                <&macro_wait_time 90>,
                <&kp C &kp A &kp S &kp E &kp UNDER &kp G &kp O &kp T &kp O &kp SPACE &kp LS(INS) &kp ENTER>,
                <&macro_press>;

            label = "GOTO_CASE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC       &kp N1        &kp N2            &kp N3           &kp N4                &kp N5           &sl 1      &kp N6         &kp N7     &kp N8     &kp N9         &kp N0      &kp BACKSPACE
&kp TAB       &kp Q         &kp W             &kp E            &kp R                 &kp T            &sl 3      &kp Y          &kp U      &kp I      &kp O          &kp P       &kp BSLH
&kp CAPS      &kp A         &kp S             &kp D            &kp F                 &kp G            &sl 0      &kp H          &kp J      &kp K      &kp L          &kp SEMI    &kp APOS
&kp LEFT_ALT  &kp Z         &kp X             &kp C            &kp V                 &kp B            &sl 2      &kp N          &kp M      &kp COMMA  &kp DOT        &kp FSLH    &kp ENTER
&kp C_MUTE    &kp LEFT_GUI  &kp LEFT_CONTROL  &mt RSHFT SPACE  &mt LEFT_SHIFT SPACE  &lt 1 LC(INS)    &kp ENTER  &lt 2 LS(INS)  &kp SPACE  &kp SPACE  &kp LG(LS(S))  &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE      &mt F11 F1  &mt F12 F2  &kp F3       &kp F4       &kp F5        &trans  &kp F6           &kp F7        &kp F8    &kp F9                &kp F10                &trans
&kp LS(GRAVE)  &trans      &kp HOME    &kp UP       &kp END      &trans        &trans  &kp PAGE_UP      &kp HOME      &kp UP    &kp END               &kp MINUS              &kp EQUAL
&trans         &trans      &kp LEFT    &kp DOWN     &kp RIGHT    &goto_case    &trans  &kp PAGE_DOWN    &kp LEFT      &kp DOWN  &kp RIGHT             &kp LS(MINUS)          &kp LS(EQUAL)
&trans         &kp LC(Z)   &kp LC(X)   &kp LC(INS)  &kp LS(INS)  &template     &trans  &kp PRINTSCREEN  &kp LS(HOME)  &kp INS   &kp LS(END)           &kp LEFT_BRACKET       &kp RIGHT_BRACKET
&trans         &trans      &trans      &trans       &trans       &trans        &trans  &trans           &trans        &trans    &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &kp K_CALCULATOR  &kp FSLH  &kp ASTRK  &kp MINUS    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &kp N7            &kp N8    &kp N9     &kp KP_PLUS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_NXT  &kp N4            &kp N5    &kp N6     &kp KP_PLUS  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_NXT  &kp N1            &kp N2    &kp N3     &kp EQUAL    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans      &trans            &trans    &kp N0     &kp PERIOD   &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
